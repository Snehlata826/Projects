LEFT BINARY TREE(6 may 2025)
level traversal using dfs

def LeftView(self,root):
  def dfs(node,level,result):
    if not node:
      return 
    if level == len(result):
      result.append(node.data)
    dfs(node.left,level+1,result)
    dfs(node.right,level+1,result)
  result=[]
  dfs(root,0,result)
  return result

ROOT TO LEAF PATH (7 may 2025)

class Solution:
    def Paths(self, root):
        # code here
        def dfs(node,path,result):
            if not node:
                return 
            path.append(node.data)
            
            if not node.left and not node.right:
                result.append(list(path))
                
            dfs(node.left,path,result)
            dfs(node.right,path,result)
            path.pop()
        result=[]
        dfs(root,[],result)
        return result

nCr (13 MAY 2025)
class solution:
  def ncr(self,n,r):
    if r>n:
      return 0
    math.comb(n,r)

or
class solution:
  def factorial(self,x):
    fact=1
    for i in range(2,x+1):
      fact*=i
    return fact
  def ncr(self,n,r):
    if r>n:
      return 0
    num=self.factorial(n)
    den=self.factorial(r)*self.factorial(n-r)
    return num//den

